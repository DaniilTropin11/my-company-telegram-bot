import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# üéõÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# üîê –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω! –î–æ–±–∞–≤—å –µ–≥–æ –≤ Environment Variables –Ω–∞ Render.")
    exit(1)

# üßë‚Äçüíº ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—É–∑–Ω–∞—Ç—å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ @userinfobot –≤ Telegram)
ADMIN_ID = 397090905  # ‚Üê –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ô ID (–∏–ª–∏ ID –∑–∞–∫–∞–∑—á–∏–∫–∞)

# üñ•Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("üìã –û–ø–µ—Ä–∞—Ü–∏–∏", callback_data='menu_operations')],
        [InlineKeyboardButton("üìö –û–±—É—á–µ–Ω–∏–µ", callback_data='menu_training')],
        [InlineKeyboardButton("üõ†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='menu_support')],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data='about')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –ü–æ–º–æ—â–Ω–∏–∫–∞!", reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.edit_message_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –ü–æ–º–æ—â–Ω–∏–∫–∞!", reply_markup=reply_markup)

# üéØ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.full_name}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    await show_main_menu(update, context)

# üÜò –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üÜò *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n"
        "/about ‚Äî –æ –±–æ—Ç–µ\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
    )
    await update.message.reply_text(help_text, parse_mode="Markdown")

# ‚ùì –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /about
async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    about_text = (
        "ü§ñ *–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –ü–æ–º–æ—â–Ω–∏–∫ v1.0*\n"
        "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏.\n"
        "–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.\n\n"
        "¬© 2025 –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
    )
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(about_text, parse_mode="Markdown", reply_markup=reply_markup)

# üñ±Ô∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # üìã –ú–µ–Ω—é –æ–ø–µ—Ä–∞—Ü–∏–π
    if query.data == 'menu_operations':
        keyboard = [
            [InlineKeyboardButton("üì• –ü—Ä–∏—ë–º –∑–∞–∫–∞–∑–∞", callback_data='instr_order')],
            [InlineKeyboardButton("üì§ –û—Ç–≥—Ä—É–∑–∫–∞", callback_data='instr_shipping')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üìã *–û–ø–µ—Ä–∞—Ü–∏–∏:*", reply_markup=reply_markup, parse_mode="Markdown")

    # üìö –ú–µ–Ω—é –æ–±—É—á–µ–Ω–∏—è
    elif query.data == 'menu_training':
        keyboard = [
            [InlineKeyboardButton("üéì –ù–æ–≤–∏—á–∫—É", callback_data='instr_newbie')],
            [InlineKeyboardButton("üìà –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–º—É", callback_data='instr_pro')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üìö *–û–±—É—á–µ–Ω–∏–µ:*", reply_markup=reply_markup, parse_mode="Markdown")

    # üõ†Ô∏è –ú–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    elif query.data == 'menu_support':
        keyboard = [
            [InlineKeyboardButton("üÜò –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–º–æ—â—å", callback_data='request_help')],
            [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data='show_contacts')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üõ†Ô∏è *–ü–æ–¥–¥–µ—Ä–∂–∫–∞:*", reply_markup=reply_markup, parse_mode="Markdown")

    # üì• –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –ü—Ä–∏—ë–º –∑–∞–∫–∞–∑–∞
    elif query.data == 'instr_order':
        text = (
            "üì• *–ü—Ä–∏—ë–º –∑–∞–∫–∞–∑–∞:*\n\n"
            "1Ô∏è‚É£ –ü–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –∏–º–µ–Ω–∏.\n"
            "2Ô∏è‚É£ –£—Ç–æ—á–Ω–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.\n"
            "3Ô∏è‚É£ –°–æ–≥–ª–∞—Å—É–π—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏.\n"
            "4Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—á—ë—Ç –≤ CRM.\n"
            "5Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑ SMS/email."
        )
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –æ–ø–µ—Ä–∞—Ü–∏—è–º", callback_data='menu_operations')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, parse_mode="Markdown", reply_markup=reply_markup)

    # üì§ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –û—Ç–≥—Ä—É–∑–∫–∞
    elif query.data == 'instr_shipping':
        text = (
            "üì§ *–û—Ç–≥—Ä—É–∑–∫–∞:*\n\n"
            "1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–ø–ª–∞—Ç—É –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
            "2Ô∏è‚É£ –°–∫–æ–º–ø–ª–µ–∫—Ç—É–π—Ç–µ –∑–∞–∫–∞–∑ –Ω–∞ —Å–∫–ª–∞–¥–µ.\n"
            "3Ô∏è‚É£ –ü–µ—Ä–µ–¥–∞–π—Ç–µ –≤ —Å–ª—É–∂–±—É –¥–æ—Å—Ç–∞–≤–∫–∏.\n"
            "4Ô∏è‚É£ –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä.\n"
            "5Ô∏è‚É£ –£–≤–µ–¥–æ–º–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞."
        )
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –æ–ø–µ—Ä–∞—Ü–∏—è–º", callback_data='menu_operations')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, parse_mode="Markdown", reply_markup=reply_markup)

    # üéì –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –ù–æ–≤–∏—á–∫—É
    elif query.data == 'instr_newbie':
        text = (
            "üéì *–î–ª—è –Ω–æ–≤–∏—á–∫–∞:*\n\n"
            "‚úÖ –ü—Ä–æ–π–¥–∏—Ç–µ –≤–≤–æ–¥–Ω—ã–π –∫—É—Ä—Å –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ.\n"
            "‚úÖ –ó–∞–ø–æ–º–Ω–∏—Ç–µ 3 –∫–ª—é—á–µ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞.\n"
            "‚úÖ –ü–µ—Ä–≤—É—é –Ω–µ–¥–µ–ª—é ‚Äî —Ç–æ–ª—å–∫–æ –ø—Ä–∏—ë–º –∑–≤–æ–Ω–∫–æ–≤.\n"
            "‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ ‚Äî –æ—Ç—á—ë—Ç –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É."
        )
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –æ–±—É—á–µ–Ω–∏—é", callback_data='menu_training')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, parse_mode="Markdown", reply_markup=reply_markup)

    # üìà –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–º—É
    elif query.data == 'instr_pro':
        text = (
            "üìà *–î–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ:*\n\n"
            "‚úÖ –í–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã —Å VIP-–∫–ª–∏–µ–Ω—Ç–∞–º–∏.\n"
            "‚úÖ –§–æ—Ä–º–∏—Ä—É–π—Ç–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.\n"
            "‚úÖ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –æ—Ç—á—ë—Ç—ã –ø—Ä–æ–¥–∞–∂.\n"
            "‚úÖ –ú–µ–Ω—Ç–æ—Ä—å—Ç–µ –Ω–æ–≤–∏—á–∫–æ–≤."
        )
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –æ–±—É—á–µ–Ω–∏—é", callback_data='menu_training')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, parse_mode="Markdown", reply_markup=reply_markup)

    # üÜò –ó–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏
    elif query.data == 'request_help':
        user = update.effective_user
        message = f"üÜò *–ó–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏ –æ—Ç:* @{user.username or 'user'} (ID: {user.id})\n–ò–º—è: {user.full_name}"
        try:
            await context.bot.send_message(chat_id=ADMIN_ID, text=message, parse_mode="Markdown")
            await query.edit_message_text("‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞!", parse_mode="Markdown")
            logger.info(f"üÜò –ó–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏ –æ—Ç {user.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É {ADMIN_ID}")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode="Markdown")

    # üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã
    elif query.data == 'show_contacts':
        text = (
            "üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:*\n\n"
            "üßë‚Äçüíº –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: +7 (XXX) XXX-XX-XX\n"
            "üìß Email: support@company.com\n"
            "üïí –†–∞–±–æ—á–∏–µ —á–∞—Å—ã: –ü–Ω-–ü—Ç, 9:00‚Äì18:00"
        )
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ", callback_data='menu_support')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, parse_mode="Markdown", reply_markup=reply_markup)

    # ‚ÑπÔ∏è –û –±–æ—Ç–µ (—á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É)
    elif query.data == 'about':
        await about(update, context)  # –≤—ã–∑—ã–≤–∞–µ–º —Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é, —á—Ç–æ –∏ –¥–ª—è /about

    # üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    elif query.data == 'back_to_main':
        await show_main_menu(update, context)

# üöÄ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –ü–æ–º–æ—â–Ω–∏–∫–∞...")
    application = Application.builder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("about", about))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button))

    logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    application.run_polling()

if __name__ == '__main__':
    main()