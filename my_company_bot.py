import os
import logging
import threading
from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# ==============================
# üîå FLASK SERVER FOR RENDER HEALTH
# ==============================
app = Flask(__name__)

@app.route('/')
def home():
    return "OK", 200

@app.route('/health')
def health():
    return "Bot is alive", 200

def run_flask():
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port)

print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è...")
flask_thread = threading.Thread(target=run_flask)
flask_thread.daemon = True
flask_thread.start()

# ==============================
# üéõÔ∏è LOGGING & CONFIG
# ==============================
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω!")
    exit(1)

ADMIN_ID = 397090905

# ==============================
# üìä GOOGLE SHEETS INTEGRATION
# ==============================
def init_google_sheets():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google –¢–∞–±–ª–∏—Ü"""
    try:
        scope = [
            "https://spreadsheets.google.com/feeds",
            "https://www.googleapis.com/auth/drive"
        ]
        # –ó–∞–≥—Ä—É–∂–∞–µ–º JSON-–∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        json_key = os.getenv("GOOGLE_SERVICE_ACCOUNT_JSON")
        if not json_key:
            logger.error("‚ùå GOOGLE_SERVICE_ACCOUNT_JSON –Ω–µ –∑–∞–¥–∞–Ω!")
            return None, None

        import json
        credentials_dict = json.loads(json_key)
        credentials = ServiceAccountCredentials.from_json_keyfile_dict(credentials_dict, scope)
        client = gspread.authorize(credentials)

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π URL)
        spreadsheet = client.open_by_url(os.getenv("GOOGLE_SHEET_URL", ""))
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–∏—Å—Ç—ã
        users_sheet = spreadsheet.worksheet("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
        tests_sheet = spreadsheet.worksheet("–¢–µ—Å—Ç—ã")
        
        # –°–æ–∑–¥–∞—ë–º –∑–∞–≥–æ–ª–æ–≤–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if not users_sheet.get_all_values():
            users_sheet.append_row(["user_id", "username", "fio", "city", "register_date", "last_activity"])
        
        if not tests_sheet.get_all_values():
            tests_sheet.append_row(["user_id", "fio", "test_name", "score", "max_score", "pass_date", "answers"])
            
        return users_sheet, tests_sheet
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google –¢–∞–±–ª–∏—Ü: {e}")
        return None, None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google –¢–∞–±–ª–∏—Ü—ã
USERS_SHEET, TESTS_SHEET = init_google_sheets()

# ==============================
# üß† USER STATE & TESTS
# ==============================
USER_STATE = {}  # {user_id: {"state": "awaiting_fio", "fio": "", "city": "", ...}}
TESTS = {
    "test_order": {
        "title": "–¢–µ—Å—Ç: –ü—Ä–∏—ë–º –∑–∞–∫–∞–∑–∞",
        "questions": [
            {
                "question": "–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–º –ø—Ä–∏ –ø—Ä–∏—ë–º–µ –∑–∞–∫–∞–∑–∞?",
                "options": [
                    "–ü–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –∏–º–µ–Ω–∏",
                    "–°—Ä–∞–∑—É –∑–∞–ø—Ä–æ—Å–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                    "–£—Ç–æ—á–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏",
                    "–û—Ç–∫—Ä—ã—Ç—å CRM-—Å–∏—Å—Ç–µ–º—É"
                ],
                "correct": 0  # –∏–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            },
            {
                "question": "–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑ –∫–ª–∏–µ–Ω—Ç—É?",
                "options": [
                    "–û—Ç–ø—Ä–∞–≤–∏—Ç—å SMS –∏–ª–∏ email —Å –¥–µ—Ç–∞–ª—è–º–∏",
                    "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –∏ —É—Å—Ç–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                    "–ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å ‚Äî –∫–ª–∏–µ–Ω—Ç —Å–∞–º —Ä–∞–∑–±–µ—Ä—ë—Ç—Å—è",
                    "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ WhatsApp"
                ],
                "correct": 0
            }
        ]
    },
    "test_shipping": {
        "title": "–¢–µ—Å—Ç: –û—Ç–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–∞",
        "questions": [
            {
                "question": "–ß—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–¥ –æ—Ç–≥—Ä—É–∑–∫–æ–π?",
                "options": [
                    "–û–ø–ª–∞—Ç—É –≤ —Å–∏—Å—Ç–µ–º–µ",
                    "–¶–≤–µ—Ç —É–ø–∞–∫–æ–≤–∫–∏",
                    "–ü–æ–≥–æ–¥—É –Ω–∞ —É–ª–∏—Ü–µ",
                    "–ù–∞–ª–∏—á–∏–µ –∫–æ—Ñ–µ —É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"
                ],
                "correct": 0
            }
        ]
    }
}

# ==============================
# üéØ COMMAND HANDLERS
# ==============================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if is_user_registered(user_id):
        await show_main_menu(update, context)
    else:
        USER_STATE[user_id] = {"state": "awaiting_fio"}
        await update.message.reply_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üÜò *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n"
        "/about ‚Äî –æ –±–æ—Ç–µ\n\n"
        "–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è (–§–ò–û, –≥–æ—Ä–æ–¥ –ü–í–ó)."
    )
    await update.message.reply_text(help_text, parse_mode="Markdown")

async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    about_text = (
        "üéì *–ë–æ—Ç –æ–±—É—á–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –ü–í–ó*\n"
        "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø—É–Ω–∫—Ç–æ–≤ –≤—ã–¥–∞—á–∏ –∑–∞–∫–∞–∑–æ–≤.\n\n"
        "¬© 2025 –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
    )
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_text(about_text, parse_mode="Markdown", reply_markup=reply_markup)
    else:
        await update.callback_query.edit_message_text(about_text, parse_mode="Markdown", reply_markup=reply_markup)

# ==============================
# üìù TEXT HANDLER (for FIO and City)
# ==============================
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    text = update.message.text.strip()

    if user_id not in USER_STATE:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return

    state = USER_STATE[user_id].get("state")

    if state == "awaiting_fio":
        USER_STATE[user_id]["fio"] = text
        USER_STATE[user_id]["state"] = "awaiting_city"
        await update.message.reply_text(f"–°–ø–∞—Å–∏–±–æ, {text}!\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤–∞—à–µ–≥–æ –ü–í–ó:")

    elif state == "awaiting_city":
        USER_STATE[user_id]["city"] = text
        USER_STATE[user_id]["username"] = user.username or "unknown"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Google –¢–∞–±–ª–∏—Ü—É
        save_user_to_sheet(user_id, USER_STATE[user_id])
        
        await update.message.reply_text(
            f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"–§–ò–û: {USER_STATE[user_id]['fio']}\n"
            f"–ì–æ—Ä–æ–¥ –ü–í–ó: {text}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –æ–±—É—á–µ–Ω–∏—é!"
        )
        await show_main_menu(update, context)

# ==============================
# üñ±Ô∏è CALLBACK HANDLER (Buttons)
# ==============================
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = update.effective_user
    user_id = user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if not is_user_registered(user_id) and query.data not in ['back_to_main']:
        await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
        return

    # üìö –ú–µ–Ω—é –æ–±—É—á–µ–Ω–∏—è
    if query.data == 'menu_training':
        keyboard = [
            [InlineKeyboardButton("üì¶ –ü—Ä–∏—ë–º –∑–∞–∫–∞–∑–∞", callback_data='material_order')],
            [InlineKeyboardButton("üöö –û—Ç–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–∞", callback_data='material_shipping')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üìö *–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—É—á–∞—é—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª:*", reply_markup=reply_markup, parse_mode="Markdown")

    # üì• –ú–∞—Ç–µ—Ä–∏–∞–ª: –ü—Ä–∏—ë–º –∑–∞–∫–∞–∑–∞
    elif query.data == 'material_order':
        text = (
            "üì¶ *–ú–∞—Ç–µ—Ä–∏–∞–ª: –ü—Ä–∏—ë–º –∑–∞–∫–∞–∑–∞*\n\n"
            "*–¢–µ–∫—Å—Ç–æ–≤—ã–π –º–∞–Ω—É–∞–ª:*\n"
            "1Ô∏è‚É£ –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–π—Ç–µ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞.\n"
            "2Ô∏è‚É£ –£—Ç–æ—á–Ω–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞.\n"
            "3Ô∏è‚É£ –°–æ–≥–ª–∞—Å—É–π—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ —Å—Ä–æ–∫–∏.\n"
            "4Ô∏è‚É£ –°–æ–∑–¥–∞–π—Ç–µ –∑–∞–∫–∞–∑ –≤ CRM-—Å–∏—Å—Ç–µ–º–µ.\n"
            "5Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª–∏–µ–Ω—Ç—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (SMS/email).\n\n"
            "*–í–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:* https://youtu.be/dQw4w9WgXcQ"
        )
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data='start_test_order')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º", callback_data='menu_training')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, parse_mode="Markdown", reply_markup=reply_markup)

    # üì§ –ú–∞—Ç–µ—Ä–∏–∞–ª: –û—Ç–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–∞
    elif query.data == 'material_shipping':
        text = (
            "üöö *–ú–∞—Ç–µ—Ä–∏–∞–ª: –û—Ç–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–∞*\n\n"
            "*–¢–µ–∫—Å—Ç–æ–≤—ã–π –º–∞–Ω—É–∞–ª:*\n"
            "1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
            "2Ô∏è‚É£ –°–∫–æ–º–ø–ª–µ–∫—Ç—É–π—Ç–µ –∑–∞–∫–∞–∑ –Ω–∞ —Å–∫–ª–∞–¥–µ.\n"
            "3Ô∏è‚É£ –ü–µ—Ä–µ–¥–∞–π—Ç–µ –ø–æ—Å—ã–ª–∫—É —Å–ª—É–∂–±–µ –¥–æ—Å—Ç–∞–≤–∫–∏.\n"
            "4Ô∏è‚É£ –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –∏ –≤–Ω–µ—Å–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.\n"
            "5Ô∏è‚É£ –£–≤–µ–¥–æ–º–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –æ –ø–µ—Ä–µ–¥–∞—á–µ –∑–∞–∫–∞–∑–∞.\n\n"
            "*–í–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:* https://youtu.be/dQw4w9WgXcQ"
        )
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data='start_test_shipping')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º", callback_data='menu_training')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, parse_mode="Markdown", reply_markup=reply_markup)

    # üß† –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç
    elif query.data.startswith('start_test_'):
        test_key = query.data.replace('start_test_', '')
        if test_key in TESTS:
            USER_STATE[user_id]['test'] = {
                'key': test_key,
                'current_question': 0,
                'score': 0,
                'answers': []
            }
            await send_test_question(update, context, user_id)

    # üìù –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞
    elif query.data.startswith('answer_'):
        _, test_key, q_index, is_correct = query.data.split('_')
        q_index = int(q_index)
        is_correct = is_correct == '1'
        
        user_test = USER_STATE[user_id]['test']
        user_test['answers'].append(is_correct)
        
        if is_correct:
            user_test['score'] += 1
            await query.edit_message_text("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!", reply_markup=None)
        else:
            await query.edit_message_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!", reply_markup=None)
        
        # –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        user_test['current_question'] += 1
        if user_test['current_question'] < len(TESTS[test_key]['questions']):
            await send_test_question(update, context, user_id)
        else:
            await show_test_result(update, context, user_id)

    # ‚ÑπÔ∏è –û –±–æ—Ç–µ
    elif query.data == 'about':
        await about(update, context)

    # üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    elif query.data == 'back_to_main':
        await show_main_menu(update, context)

# ==============================
# üé• TEST FUNCTIONS
# ==============================
async def send_test_question(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞"""
    user_test = USER_STATE[user_id]['test']
    test_key = user_test['key']
    q_index = user_test['current_question']
    
    if q_index >= len(TESTS[test_key]['questions']):
        await show_test_result(update, context, user_id)
        return
    
    question_data = TESTS[test_key]['questions'][q_index]
    
    keyboard = []
    for i, option in enumerate(question_data['options']):
        callback_data = f"answer_{test_key}_{q_index}_{'1' if i == question_data['correct'] else '0'}"
        keyboard.append([InlineKeyboardButton(option, callback_data=callback_data)])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = f"üìù *–í–æ–ø—Ä–æ—Å {q_index + 1} –∏–∑ {len(TESTS[test_key]['questions'])}:*\n\n{question_data['question']}"
    
    if update.callback_query:
        await update.callback_query.message.reply_text(text, parse_mode="Markdown", reply_markup=reply_markup)
    else:
        await context.bot.send_message(chat_id=user_id, text=text, parse_mode="Markdown", reply_markup=reply_markup)

async def show_test_result(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
    user_test = USER_STATE[user_id]['test']
    test_key = user_test['key']
    total_questions = len(TESTS[test_key]['questions'])
    score = user_test['score']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Google –¢–∞–±–ª–∏—Ü—É
    save_test_result_to_sheet(
        user_id=user_id,
        fio=USER_STATE[user_id]['fio'],
        test_name=TESTS[test_key]['title'],
        score=score,
        max_score=total_questions,
        answers=user_test['answers']
    )
    
    text = (
        f"üéâ *–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!*\n\n"
        f"–¢–µ—Å—Ç: {TESTS[test_key]['title']}\n"
        f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {score} –∏–∑ {total_questions}\n\n"
    )
    
    if score == total_questions:
        text += "üåü –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ —Å–ø—Ä–∞–≤–∏–ª–∏—Å—å!"
    elif score >= total_questions * 0.7:
        text += "üëç –•–æ—Ä–æ—à–æ! –ü–æ—á—Ç–∏ –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ."
    else:
        text += "üìö –ù—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª."
    
    keyboard = [
        [InlineKeyboardButton("üìö –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º", callback_data='menu_training')],
        [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.message.reply_text(text, parse_mode="Markdown", reply_markup=reply_markup)
    else:
        await context.bot.send_message(chat_id=user_id, text=text, parse_mode="Markdown", reply_markup=reply_markup)

# ==============================
# üñ•Ô∏è MAIN MENU & UTILS
# ==============================
async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("üìö –û–±—É—á–µ–Ω–∏–µ", callback_data='menu_training')],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data='about')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –æ–±—É—á–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –ü–í–ó!"
    
    if update.message:
        await update.message.reply_text(text, reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)

def is_user_registered(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    if USERS_SHEET:
        try:
            cell = USERS_SHEET.find(str(user_id))
            return cell is not None
        except:
            pass
    # Fallback –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    return user_id in USER_STATE and "city" in USER_STATE[user_id]

def save_user_to_sheet(user_id: int, user_data: dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Google –¢–∞–±–ª–∏—Ü—É"""
    if not USERS_SHEET:
        return
    
    try:
        from datetime import datetime
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        USERS_SHEET.append_row([
            str(user_id),
            user_data.get("username", ""),
            user_data.get("fio", ""),
            user_data.get("city", ""),
            now,
            now
        ])
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ Google –¢–∞–±–ª–∏—Ü—É")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

def save_test_result_to_sheet(user_id: int, fio: str, test_name: str, score: int, max_score: int, answers: list):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –≤ Google –¢–∞–±–ª–∏—Ü—É"""
    if not TESTS_SHEET:
        return
    
    try:
        from datetime import datetime
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        TESTS_SHEET.append_row([
            str(user_id),
            fio,
            test_name,
            str(score),
            str(max_score),
            now,
            str(answers)
        ])
        logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –¥–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞: {e}")

# ==============================
# üöÄ MAIN FUNCTION
# ==============================
def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ë–æ—Ç–∞ –æ–±—É—á–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –ü–í–ó...")
    application = Application.builder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("about", about))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_handler(CallbackQueryHandler(button))

    logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    application.run_polling()

if __name__ == '__main__':
    main()